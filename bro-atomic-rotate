#!/usr/bin/env python
#
# Background task to atomically compress and move bro log files
#
import datetime
import os
import shutil
import subprocess
import sys
import time
import traceback

# Bro currently only supports writing .gz files directly, but adding the most
# common compression extensions now can't hurt.
COMPRESSED_EXTENSIONS = ["gz", 'bz2', 'lz', 'lz4']

# Since I'm using 'broctl config' instead of the broctl api some things are a
# little harder than they should be
TRUE_VALUES = ['1', 'on', 'true', 'yes']

def log(msg):
    sys.stdout.write(msg + "\n")
    sys.stdout.flush()

def broctl_config():
    #could do this using broctl in python directly, but this is more portable
    cfg = {}
    out = subprocess.check_output(["broctl", "config"]).decode('utf-8')
    for line in out.splitlines():
        if ' = ' not in line:
            continue
        k, v = line.split(" = ", 1)
        cfg[k] = v

    return cfg
CFG = broctl_config()

def same_dev(p1, p2):
    d1 = os.stat(p1).st_dev
    d2 = os.stat(p2).st_dev
    return d1 == d2

def parse_ts(ts):
    first_part = ts.split("-")[0]
    if len(first_part) == 2:
        ts = "20" + ts
    fixed = ts.replace('_', '-').replace('.', '-')
    d = datetime.datetime.strptime(fixed, "%Y-%m-%d-%H-%M-%S")
    return d

def compress_file(f):
    log_queue_dir = os.path.join(CFG["spooldir"], "log_queue")
    src = os.path.join(log_queue_dir, f)

    log, t_open, t_close = f.split("__")

    ts_open  = parse_ts(t_open)
    ts_close = parse_ts(t_close)

    day = ts_open.strftime('%Y-%m-%d')
    open_hms = ts_open.strftime('%H:%M:%S')
    close_hms = ts_close.strftime('%H:%M:%S')

    base = log.split('.', 1)[0]
    ext = log.rsplit('.', 1)[-1]

    final_filename = '%s/%s.%s-%s.%s' % (day, base, open_hms, close_hms, ext)
    #log(final_filename)

    archived_filename = os.path.join(CFG['logdir'], final_filename)
    if ext not in COMPRESSED_EXTENSIONS and CFG['compresslogs'].lower() in TRUE_VALUES:
        atomic_compress(src, archived_filename)
    else:
        atomic_move(src, archived_filename)

def atomic_move(src, dst):
    log("Atomic move %s to %s" % (src, dst))
    dst_dir = os.path.dirname(dst)
    dst_file = os.path.basename(dst)
    if not os.path.isdir(dst_dir):
        os.makedirs(dst_dir)

    if same_dev(src, dst_dir):
        os.rename(src, dst)
        return

    #rsync here?
    dst_tmp = os.path.join(dst_dir, ".tmp." + dst_file)
    shutil.copy(src, dst_tmp)
    os.rename(dst_tmp, dst)
    os.remove(src)

def atomic_compress(src, dst):
    ext = '.' + CFG['compressextension']
    dst_dir = os.path.dirname(dst)
    dst_file = os.path.basename(dst) + ext
    log("Atomic compress %s to %s" % (src, dst_file))

    if not os.path.isdir(dst_dir):
        os.makedirs(dst_dir)

    dst_tmp = os.path.join(dst_dir, ".tmp." + dst_file)
    with open(src) as f_src, open(dst_tmp, 'w') as f_dst:
        subprocess.check_call(CFG['compresscmd'], shell=True, stdin=f_src, stdout=f_dst)

    os.rename(dst_tmp, dst+ext)
    os.remove(src)

def compress():
    log_queue_dir = os.path.join(CFG["spooldir"], "log_queue")
    if not os.path.isdir(log_queue_dir):
        os.makedirs(log_queue_dir)

    rotated = 0
    errors = 0
    for f in os.listdir(log_queue_dir):
        try:
            compress_file(f)
            rotated += 1
        except:
            traceback.print_exc()
            errors += 1

    return rotated, errors

def main():
    while True:
        s = time.time()
        rotated, errors = compress()
        e = time.time()
        if rotated:
            log("archived files=%d errors=%d seconds=%d" % (rotated, errors, e-s))

        delay = 1 if rotated else 30
        time.sleep(delay)
    
if __name__ == "__main__":
    main()
